/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.trafficmove.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SensorData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4350479070874039646L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorData\",\"namespace\":\"com.trafficmove.avro\",\"fields\":[{\"name\":\"vehicleId\",\"type\":\"string\"},{\"name\":\"vehicleType\",\"type\":\"string\"},{\"name\":\"routeId\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"fuelLevel\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorData> ENCODER =
      new BinaryMessageEncoder<SensorData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorData> DECODER =
      new BinaryMessageDecoder<SensorData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SensorData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SensorData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SensorData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SensorData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SensorData from a ByteBuffer. */
  public static SensorData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence vehicleId;
  @Deprecated public java.lang.CharSequence vehicleType;
  @Deprecated public java.lang.CharSequence routeId;
  @Deprecated public java.lang.CharSequence latitude;
  @Deprecated public java.lang.CharSequence longitude;
  @Deprecated public long timestamp;
  @Deprecated public double speed;
  @Deprecated public double fuelLevel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorData() {}

  /**
   * All-args constructor.
   * @param vehicleId The new value for vehicleId
   * @param vehicleType The new value for vehicleType
   * @param routeId The new value for routeId
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param timestamp The new value for timestamp
   * @param speed The new value for speed
   * @param fuelLevel The new value for fuelLevel
   */
  public SensorData(java.lang.CharSequence vehicleId, java.lang.CharSequence vehicleType, java.lang.CharSequence routeId, java.lang.CharSequence latitude, java.lang.CharSequence longitude, java.lang.Long timestamp, java.lang.Double speed, java.lang.Double fuelLevel) {
    this.vehicleId = vehicleId;
    this.vehicleType = vehicleType;
    this.routeId = routeId;
    this.latitude = latitude;
    this.longitude = longitude;
    this.timestamp = timestamp;
    this.speed = speed;
    this.fuelLevel = fuelLevel;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicleId;
    case 1: return vehicleType;
    case 2: return routeId;
    case 3: return latitude;
    case 4: return longitude;
    case 5: return timestamp;
    case 6: return speed;
    case 7: return fuelLevel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicleId = (java.lang.CharSequence)value$; break;
    case 1: vehicleType = (java.lang.CharSequence)value$; break;
    case 2: routeId = (java.lang.CharSequence)value$; break;
    case 3: latitude = (java.lang.CharSequence)value$; break;
    case 4: longitude = (java.lang.CharSequence)value$; break;
    case 5: timestamp = (java.lang.Long)value$; break;
    case 6: speed = (java.lang.Double)value$; break;
    case 7: fuelLevel = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vehicleId' field.
   * @return The value of the 'vehicleId' field.
   */
  public java.lang.CharSequence getVehicleId() {
    return vehicleId;
  }

  /**
   * Sets the value of the 'vehicleId' field.
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.CharSequence value) {
    this.vehicleId = value;
  }

  /**
   * Gets the value of the 'vehicleType' field.
   * @return The value of the 'vehicleType' field.
   */
  public java.lang.CharSequence getVehicleType() {
    return vehicleType;
  }

  /**
   * Sets the value of the 'vehicleType' field.
   * @param value the value to set.
   */
  public void setVehicleType(java.lang.CharSequence value) {
    this.vehicleType = value;
  }

  /**
   * Gets the value of the 'routeId' field.
   * @return The value of the 'routeId' field.
   */
  public java.lang.CharSequence getRouteId() {
    return routeId;
  }

  /**
   * Sets the value of the 'routeId' field.
   * @param value the value to set.
   */
  public void setRouteId(java.lang.CharSequence value) {
    this.routeId = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.CharSequence value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'fuelLevel' field.
   * @return The value of the 'fuelLevel' field.
   */
  public java.lang.Double getFuelLevel() {
    return fuelLevel;
  }

  /**
   * Sets the value of the 'fuelLevel' field.
   * @param value the value to set.
   */
  public void setFuelLevel(java.lang.Double value) {
    this.fuelLevel = value;
  }

  /**
   * Creates a new SensorData RecordBuilder.
   * @return A new SensorData RecordBuilder
   */
  public static com.trafficmove.avro.SensorData.Builder newBuilder() {
    return new com.trafficmove.avro.SensorData.Builder();
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorData RecordBuilder
   */
  public static com.trafficmove.avro.SensorData.Builder newBuilder(com.trafficmove.avro.SensorData.Builder other) {
    return new com.trafficmove.avro.SensorData.Builder(other);
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing SensorData instance.
   * @param other The existing instance to copy.
   * @return A new SensorData RecordBuilder
   */
  public static com.trafficmove.avro.SensorData.Builder newBuilder(com.trafficmove.avro.SensorData other) {
    return new com.trafficmove.avro.SensorData.Builder(other);
  }

  /**
   * RecordBuilder for SensorData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorData>
    implements org.apache.avro.data.RecordBuilder<SensorData> {

    private java.lang.CharSequence vehicleId;
    private java.lang.CharSequence vehicleType;
    private java.lang.CharSequence routeId;
    private java.lang.CharSequence latitude;
    private java.lang.CharSequence longitude;
    private long timestamp;
    private double speed;
    private double fuelLevel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.trafficmove.avro.SensorData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[0].schema(), other.vehicleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleType)) {
        this.vehicleType = data().deepCopy(fields()[1].schema(), other.vehicleType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.routeId)) {
        this.routeId = data().deepCopy(fields()[2].schema(), other.routeId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fuelLevel)) {
        this.fuelLevel = data().deepCopy(fields()[7].schema(), other.fuelLevel);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SensorData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.trafficmove.avro.SensorData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicleId)) {
        this.vehicleId = data().deepCopy(fields()[0].schema(), other.vehicleId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleType)) {
        this.vehicleType = data().deepCopy(fields()[1].schema(), other.vehicleType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.routeId)) {
        this.routeId = data().deepCopy(fields()[2].schema(), other.routeId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.speed)) {
        this.speed = data().deepCopy(fields()[6].schema(), other.speed);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fuelLevel)) {
        this.fuelLevel = data().deepCopy(fields()[7].schema(), other.fuelLevel);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'vehicleId' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleId() {
      return vehicleId;
    }

    /**
      * Sets the value of the 'vehicleId' field.
      * @param value The value of 'vehicleId'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setVehicleId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.vehicleId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleId' field has been set.
      * @return True if the 'vehicleId' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicleId' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearVehicleId() {
      vehicleId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleType' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleType() {
      return vehicleType;
    }

    /**
      * Sets the value of the 'vehicleType' field.
      * @param value The value of 'vehicleType'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setVehicleType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.vehicleType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleType' field has been set.
      * @return True if the 'vehicleType' field has been set, false otherwise.
      */
    public boolean hasVehicleType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vehicleType' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearVehicleType() {
      vehicleType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'routeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRouteId() {
      return routeId;
    }

    /**
      * Sets the value of the 'routeId' field.
      * @param value The value of 'routeId'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setRouteId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.routeId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'routeId' field has been set.
      * @return True if the 'routeId' field has been set, false otherwise.
      */
    public boolean hasRouteId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'routeId' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearRouteId() {
      routeId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setTimestamp(long value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setSpeed(double value) {
      validate(fields()[6], value);
      this.speed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearSpeed() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'fuelLevel' field.
      * @return The value.
      */
    public java.lang.Double getFuelLevel() {
      return fuelLevel;
    }

    /**
      * Sets the value of the 'fuelLevel' field.
      * @param value The value of 'fuelLevel'.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder setFuelLevel(double value) {
      validate(fields()[7], value);
      this.fuelLevel = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'fuelLevel' field has been set.
      * @return True if the 'fuelLevel' field has been set, false otherwise.
      */
    public boolean hasFuelLevel() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'fuelLevel' field.
      * @return This builder.
      */
    public com.trafficmove.avro.SensorData.Builder clearFuelLevel() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorData build() {
      try {
        SensorData record = new SensorData();
        record.vehicleId = fieldSetFlags()[0] ? this.vehicleId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.vehicleType = fieldSetFlags()[1] ? this.vehicleType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.routeId = fieldSetFlags()[2] ? this.routeId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.speed = fieldSetFlags()[6] ? this.speed : (java.lang.Double) defaultValue(fields()[6]);
        record.fuelLevel = fieldSetFlags()[7] ? this.fuelLevel : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorData>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorData>
    READER$ = (org.apache.avro.io.DatumReader<SensorData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
